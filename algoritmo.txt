// servidor.c
typedef struct dogType_s {} dogType;
typedef struct tabla_s {} tabla;
main {
crea el servidor
	while {
	  clientfd = listen()
		open semaforo(clientes)
		join hilo
		create hilo(&clientfd)
		while(clientfd != 0){
		  sleep()
		}
	}
}
hilo {
	recibir mensaje
	r = funcion que necesita
	log = "fecha cliente IP funcion r"
	open semaforo(log)
	escribir(log)
	close semaforo(log)
	close semaforo(clientes)
}

ingresar {
	recibir dogType
	open semaforo
	new hash, ...
	close semaforo
	enviar clave
}
ver {
	recibir clave
	si existe {
		enviar(SUCCESS)
		open semaforo(dogtypes)
		leer dog(clave)
		close semaforo(dogtypes)
		enviar(dog(clave))
		recibir(archivo?)
		si archivo {
			open semaforo(dogtypes)
			leer(archivo)
			enviar(archivo)
			recibir(cambio?)
			si cambio {
				recibir(archivo)
				escribir(archivo)
			}
			close semaforo(dogtypes)
		}
	}
	sino {
		enviar(FAILURE)
	}
}
borrar {
recibir clave
	si existe {
		enviar(SUCCESS)
		open semaforo(dogtypes)
		borrar(clave)
		close semaforo(dogtypes)
	sino {
		enviar(FAILURE)
	}
}
buscar {
	recibir(string)
	open semaforo(dogtypes)
	buscar(string)
	close semaforo(dogtypes)
	enviar(numeroDeDatos) // ej: 16
	loop:
		enviar(Datos) // ej: (Mario, 1), (Mario, 3), (Mario, 16), ...
		recibir(cuantosdatos?)
	
}


escribir/enviar/recibir {
	r = 0;
	while(r < numeroDeDatos){
		r += escribir/enviar/recibir
	}
}



// cliente.c
typedef struct dogType_s {} dogType;
termios

menu {}

ingresar {
	scanf()...
	dogType newDog = datos
	enviar(newDog)
	recibir(clave)
}
ver {
	scanf(clave)
	enviar(clave)
	recibir(existe?)
	si existe {
		recibir(dogType)
		print(dog)
		scanf(archivo?)
		si archivo {
			enviar(SI)
			recibir(archivo)
			leer la ultima fecha de modificacion -> fecha1
			abrir(archivo)
			leer la ultima fecha de modificacion -> fecha2
			enviar(fecha1 == fecha2)
			if fecha1 != fecha2 {
				enviar(archivo)
			}
		}
		sino {
			enviar(NO)
		}
	}
}
borrar {
	scanf(clave)
	enviar(clave)
	recibir(existe?)
	print(si existe)
}
buscar {
	scanf(string)
	enviar(string)
	recibir(numeroDeDatos)
	loop:
		recibir(Datos)
		enviar(cuantosdatos)
	print como en p1 
}

salir {
exit(exit code)
}

